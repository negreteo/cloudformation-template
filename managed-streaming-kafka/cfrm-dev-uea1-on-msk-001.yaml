AWSTemplateFormatVersion: "2010-09-09"
Description: Amazon MSK Cluster for Kafka Streaming Test

Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String
    Default: eip-dev-uea1-on-kafka

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: "AWS::EC2::KeyPair::KeyName"
    ConstraintDescription: Can contain only ASCII characters.

  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: "9"
    MaxLength: "18"
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x

Mappings:
  AWSRegionAMIEC2:
    us-east-1:
      ami: ami-00beae93a2d981137
    #   ami: ami-0ff8a91507f77f867
    # us-west-1:
    #   ami: ami-a0cfeed8
    # eu-central-1:
    #   ami: ami-0233214e13e500f77
    # eu-west-1:
    #   ami: ami-047bb4163c506cd98

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub "vpc-${EnvironmentName}-001"

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: "10.0.0.0/24"
      Tags:
        - Key: Name
          Value: !Sub "sn-${EnvironmentName}-001"

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: "10.0.1.0/24"
      Tags:
        - Key: Name
          Value: !Sub "sn-${EnvironmentName}-002"

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [2, !GetAZs ""]
      CidrBlock: "10.0.2.0/24"
      Tags:
        - Key: Name
          Value: !Sub "sn-${EnvironmentName}-003"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "igw-${EnvironmentName}-001"

  InternetGatewayVpcAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "rt-${EnvironmentName}-001"

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayVpcAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet3

  IAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: "MksCluster"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "kafka-cluster:*Topic*"
                Resource: "*"
              - Effect: Allow
                Action: "kafka-cluster:*"
                Resource: "*"
      Tags:
        - Key: Name
          Value: !Sub "iamr-${EnvironmentName}-001"

  IAMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref IAMRole

  MskCluster:
    Type: AWS::MSK::Cluster
    Properties:
      ClusterName: !Sub "msk-${EnvironmentName}-001"
      KafkaVersion: "3.5.1"
      NumberOfBrokerNodes: 3
      BrokerNodeGroupInfo:
        BrokerAZDistribution: "DEFAULT"
        InstanceType: "kafka.t3.small"
        ClientSubnets:
          - !Ref PublicSubnet1
          - !Ref PublicSubnet2
          - !Ref PublicSubnet3
        SecurityGroups:
          - !GetAtt VPC.DefaultSecurityGroup
        StorageInfo:
          EBSStorageInfo:
            VolumeSize: 1
      ClientAuthentication:
        Sasl:
          Iam:
            Enabled: true
      EncryptionInfo:
        EncryptionInTransit:
          ClientBroker: "TLS"
          InCluster: true
      LoggingInfo:
        BrokerLogs:
          CloudWatchLogs:
            Enabled: true
            LogGroup: !Sub "/aws/msk/${EnvironmentName}-001"
      Tags:
        Name: !Sub "msk-${EnvironmentName}-001"
        jbl:owner_email: oscar_negrete@jabil.com
        jbl:cost_center: "4123"
        jbl:backup: "no"
        jbl:project_name: "Kafka Streaming POC"
        jbl:support_team_email: EIP_Support@jabil.com

  EC2InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for SSH access"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation

  VpcSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: -1
      GroupId: !GetAtt VPC.DefaultSecurityGroup
      SourceSecurityGroupId: !GetAtt EC2InstanceSecurityGroup.GroupId

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: "t2.micro"
      ImageId: !FindInMap [AWSRegionAMIEC2, !Ref "AWS::Region", "ami"]
      IamInstanceProfile: !Ref IAMInstanceProfile
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          SubnetId: !Ref PublicSubnet1
          GroupSet:
            - !Ref EC2InstanceSecurityGroup
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: !Sub "ec2-${EnvironmentName}-001"

Outputs:
  MSKCluster:
    Value: !Ref MskCluster
  VpcId:
    Value: !Ref VPC
  VpcDefaultSecurityGroup:
    Value: !GetAtt VPC.DefaultSecurityGroup
  PublicSubnet1:
    Value: !Ref PublicSubnet1
  PublicSubnet2:
    Value: !Ref PublicSubnet2
  PublicSubnet3:
    Value: !Ref PublicSubnet3
  IAMRoleName:
    Value: !Ref IAMRole
  IAMInstanceProfile:
    Value: !Ref IAMInstanceProfile
  EC2InstanceId:
    Value: !Ref EC2Instance
  EC2InstancePublicIp:
    Value: !GetAtt EC2Instance.PublicIp
